
* getter, setter - 필요시에만 사용
  - SET
	클래스명 .(찹조) SET-메소드 (매개변수)
	set을 통해서 값을 넣어줌

  - GET
	return으로 값을 반환 
  
* 생성자로도 값을 가져올 수 있음

extends Person > private를 제외한 모든 객체를 상속받음\

상속을 받으면 기본생성자가 무조건 있어야하는건 X
자식클래스에서 기본생성자가 존재하면 부모클래스에서도 기본생성자가 있어야한다.
생략되어있는 기본생성자가 비활성화되기때문에 따로 작성해줘야함.
부모에 기본생성자를 만들어주거나 자식의 기본생성자 생성 시 부모생성자를 불러오는 super()의 매개변수를 빈 값을 넣어줌 ex) super(null, 0)

생성될 때 무조건 값이 들어가야하는 경우 > 기본생성자가 있으면 안됨 > 강제성을 띰


추상클래스 > 생성x


////

B ->업캐스팅-> A ->다운캐스팅-> B
B ->업캐스팅-> A ->다운캐스팅-> C

////

protected

주소. > 객체를 리턴함 > 그래서 주소를 리턴하게 해야함
	ㄴ 그 안에 쓸 수있는 메소드를 사용할 수 있음
	
	
////

클래스에 static이 붙으면 생성되면서 힙 메모리 영역에 할당되는게 아닌 스택영역에 만들어짐 
static > 생성되지 않아도 존재해 호출가능한 영역

////

private > 외부에서 생성 불가, 호출 불가능
	instance라는 변수에 자기자신 생성
	
////

제네릭
	일반 자료형을 사용할 수 없고 클래스타입으로 사용
	
////

ㅇ list > 데이터의 변함이 적은 경우 (데이터 중간에 추가시 뒤에 있는 데이터를 옮겨야함)
	ㄴ 순서 o, 중복 o	>> ArrayList
	
ㅇ set > 최악의 처리시간이 존재(모든 경우를 다 대입) >> tree를 통해 탐색시간을 줄일 수 있음
	ㄴ 순서 x, 중복 x	>> HashSet
	ㄴ 수정 x > 지우고 새로 추가해야함
	
ㅇ map > list와 set을 섞어놓음, Map<K, V> 키, 값
	ㄴ 순서 x, 키 중복 x, 값 중복 o	>> HashMap

////

- Collection 인터페이스에서 제공하는 주요 메소드	> list와 set 인터페이스가 가지고 있음

ㅇ boolean add(E e)				|	해당 컬렉션(collection)에 전달된 요소를 추가함. (선택적 기능)
ㅇ void clear()					|	해당 컬렉션의 모든 요소를 제거함. (선택적 기능)
ㅇ boolean contains(Object o)	|	해당 컬렉션이 전달된 객체를 포함하고 있는지를 확인함.
ㅇ boolean equals(Object o)		|	해당 컬렉션과 전달된 객체가 같은지를 확인함.
ㅇ boolean isEmpty()				|	해당 컬렉션이 비어있는지를 확인함.
ㅇ Iterator<E> iterator()		|	해당 컬렉션의 반복자(iterator)를 반환함.
ㅇ boolean remove(Object o)		|	해당 컬렉션에서 전달된 객체를 제거함. (선택적 기능)
ㅇ int size()					|	해당 컬렉션의 요소의 총 개수를 반환함.
ㅇ Object[] toArray()			|	해당 컬렉션의 모든 요소를 Object 타입의 배열로 반환함. > object로 바꿔야지 모든 객체의 형태로 반환 가능 (object는 최상위 객체이기 때문)

////























